{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["setContent","process","Component","newItemsLoading","Spinner","ErrorMessage","Error","ComicsList","props","useState","comicsList","setComicsList","newComicsLoading","setNewComicsLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","setProcess","clearError","getAllComics","useEffect","onReguest","initial","then","onCharsLoaded","newCharList","ended","length","className","comics","items","map","item","id","name","price","thumbnail","title","to","src","alt","displayComics","disabled","style","display","onClick","ComicsPage","Helmet","content","AppBanner","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"wNASMA,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAO,cAACG,EAAA,EAAD,IACX,IAAK,UACD,OAAOD,EAAkB,cAACD,EAAD,IAAgB,cAACE,EAAA,EAAD,IAC7C,IAAK,YACD,OAAO,cAACF,EAAD,IACX,IAAK,QACD,OAAO,cAACG,EAAA,EAAD,IACX,QACI,MAAM,IAAIC,MAAM,8BAoEbC,EAhEI,SAACC,GAChB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAA4BJ,mBAAS,KAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAEA,EAA0EC,cAAlDjB,GAAxB,EAAQkB,QAAR,EAAiBC,MAAjB,EAAwBnB,SAASoB,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,WAAYC,EAAzD,EAAyDA,aAEzDC,qBAAU,WACNC,EAAUX,GAAQ,KACnB,IAEH,IAAMW,EAAY,SAACX,EAAQY,GACvBJ,IACUT,GAAVa,GACAH,EAAaT,GACRa,KAAKC,GACLD,MAAK,kBAAMN,EAAW,iBAGzBO,EAAgB,SAACC,GAEnB,IAAIC,EAAQD,EAAYE,OAAS,EAEjCpB,GAAc,SAACD,GAAD,4BAAoBA,GAApB,YAAmCmB,OACjDhB,GAAoB,GACpBE,GAAU,SAACD,GAAD,OAAYA,EAAS,KAC/BG,EAAea,IAqBnB,OACI,sBAAKE,UAAU,eAAf,UACKhC,EAAWC,GAAS,kBApBP,SAACgC,GACnB,IAAMC,EAAQD,EAAOE,KAAI,SAACC,GACtB,IAAQC,EAA+BD,EAA/BC,GAAIC,EAA2BF,EAA3BE,KAAMC,EAAqBH,EAArBG,MAAOC,EAAcJ,EAAdI,UAEzB,OACI,oBAAaR,UAAU,eAAeS,MAAM,eAA5C,SACI,eAAC,IAAD,CAAMC,GAAE,kBAAaL,GAArB,UACI,qBAAKM,IAAKH,EAAWI,IAAI,eAAeZ,UAAU,qBAClD,qBAAKA,UAAU,oBAAf,SAAoCM,IACpC,qBAAKN,UAAU,qBAAf,SAAqCO,QAJpCF,MAUjB,OAAO,oBAAIL,UAAU,eAAd,SAA8BE,IAKNW,CAAcnC,KAAaE,GACtD,wBACIoB,UAAU,mCACVc,SAAUlC,EAEVmC,MAAO,CAAEC,QAAShC,EAAc,OAAS,SACzCiC,QAAS,kBAAMxB,EAAUX,IAL7B,SAOI,qBAAKkB,UAAU,QAAf,6BChEDkB,UAbI,WACf,OACI,qCACI,eAACC,EAAA,EAAD,WACI,sBAAMb,KAAK,cAAcc,QAAQ,0BACjC,mDAEJ,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,wFCTG,SAASC,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/8.0f8bfa17.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./comicsList.scss\";\r\n\r\nconst setContent = (process, Component, newItemsLoading) => {\r\n    switch (process) {\r\n        case \"waiting\":\r\n            return <Spinner />;\r\n        case \"loading\":\r\n            return newItemsLoading ? <Component /> : <Spinner />;\r\n        case \"confirmed\":\r\n            return <Component />;\r\n        case \"error\":\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n};\r\n\r\nconst ComicsList = (props) => {\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newComicsLoading, setNewComicsLoading] = useState(false);\r\n    const [offset, setOffset] = useState(200);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const { loading, error, process, setProcess, clearError, getAllComics } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onReguest(offset, true);\r\n    }, []);\r\n\r\n    const onReguest = (offset, initial) => {\r\n        clearError();\r\n        initial ? setNewComicsLoading(false) : setNewComicsLoading(true);\r\n        getAllComics(offset)\r\n            .then(onCharsLoaded)\r\n            .then(() => setProcess(\"confirmed\"));\r\n    };\r\n\r\n    const onCharsLoaded = (newCharList) => {\r\n        // проверяем, не закончились ли еще персонажи от сервера (ended)\r\n        let ended = newCharList.length < 8 ? true : false;\r\n\r\n        setComicsList((comicsList) => [...comicsList, ...newCharList]);\r\n        setNewComicsLoading(false);\r\n        setOffset((offset) => offset + 8);\r\n        setComicsEnded(ended);\r\n    };\r\n\r\n    const displayComics = (comics) => {\r\n        const items = comics.map((item) => {\r\n            const { id, name, price, thumbnail } = item;\r\n\r\n            return (\r\n                <li key={id} className=\"comics__item\" title=\"More details\">\r\n                    <Link to={`/comics/${id}`}>\r\n                        <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\" />\r\n                        <div className=\"comics__item-name\">{name}</div>\r\n                        <div className=\"comics__item-price\">{price}</div>\r\n                    </Link>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return <ul className=\"comics__grid\">{items}</ul>;\r\n    };\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {setContent(process, () => displayComics(comicsList), newComicsLoading)}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newComicsLoading}\r\n                // убираем кнопку если персонажи закончились (style)\r\n                style={{ display: comicsEnded ? \"none\" : \"block\" }}\r\n                onClick={() => onReguest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComicsList;\r\n","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Сomics main page\" />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}