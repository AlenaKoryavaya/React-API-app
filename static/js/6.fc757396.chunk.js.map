{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/findCharForm/FindCharForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","checkedDescr","slice","style","objectFit","className","src","alt","href","rel","target","RandomChar","useState","char","setChar","useMarvelService","process","setProcess","clearError","getCharacterById","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","Component","newItemsLoading","Spinner","ErrorMessage","Error","CharList","props","charList","setCharList","setNewItemsLoading","offset","setOffset","charEnded","setCharEnded","selectedChar","setSelectedChar","loading","error","getAllCharacters","onReguest","initial","onCharsLoaded","newCharList","ended","length","onCharSelected","i","elements","map","item","styleSelectedImg","styleImgFormat","CSSTransition","classNames","timeout","tabIndex","onKeyDown","e","key","TransitionGroup","component","displayChars","disabled","display","comiclink","comics","CharInfo","charId","FindCharForm","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","MainPage","Helmet","content","decoration","request","useCallback","url","a","method","body","headers","fetch","res","ok","status","json","useHttp","_apiBase","_apiKey","_transformCharacter","getAllComics","_transformComics","getComic","checkLinks","arrLinks","linkName","filter","path","extension","urls","items","title","pages","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/6.fc757396.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nimport \"./randomChar.scss\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n    const { process, setProcess, clearError, getCharacterById } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // const timerId = setInterval(updateChar, 60000);\r\n        // return () => { clearInterval(timerId) };\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacterById(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess(\"confirmed\"));\r\n    };\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!\r\n                    <br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">Or choose another one</p>\r\n                <button className=\"button button__main\" onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Просто рендарищийся компонент без логики\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = data;\r\n\r\n    const checkedDescr = !description\r\n        ? \"The character description is missing\"\r\n        : `${description.slice(0, 210)}...`;\r\n\r\n    let style = { objectFit: \"cover\" };\r\n\r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n        style = { objectFit: \"fill\" };\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={style} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">{checkedDescr}</p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a\r\n                        href={homepage}\r\n                        rel=\"noreferrer\"\r\n                        className=\"button button__main\"\r\n                        target=\"_blank\"\r\n                    >\r\n                        <div className=\"inner\">Homepage</div>\r\n                    </a>\r\n                    <a\r\n                        href={wiki}\r\n                        rel=\"noreferrer\"\r\n                        className=\"button button__secondary\"\r\n                        target=\"_blank\"\r\n                    >\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect } from \"react\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./charList.scss\";\r\n\r\nconst setContent = (process, Component, newItemsLoading) => {\r\n    switch (process) {\r\n        case \"waiting\":\r\n            return <Spinner />;\r\n        case \"loading\":\r\n            return newItemsLoading ? <Component /> : <Spinner />;\r\n        case \"confirmed\":\r\n            return <Component />;\r\n        case \"error\":\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n};\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const { loading, error, process, setProcess, getAllCharacters } = useMarvelService();\r\n\r\n    // если init - true -> то это получ первичная загрузка\r\n    useEffect(() => {\r\n        onReguest(offset, true);\r\n    }, []); // [] - то, функция выполниться только 1 раз (т.к. зависимость [])\r\n\r\n    const onReguest = (offset, initial) => {\r\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharsLoaded)\r\n            .then(() => setProcess(\"confirmed\"));\r\n    };\r\n\r\n    const onCharsLoaded = (newCharList) => {\r\n        // проверяем, не закончились ли еще персонажи от сервера (ended)\r\n        let ended = newCharList.length < 9 ? true : false;\r\n\r\n        setCharList((charList) => [...charList, ...newCharList]);\r\n        setNewItemsLoading((newItemsLoading) => false);\r\n        setOffset((offset) => offset + 9);\r\n        setCharEnded((charEnded) => ended);\r\n    };\r\n\r\n    const onCharSelected = (id, i) => {\r\n        setSelectedChar(i);\r\n        props.onCharSelected(id);\r\n    };\r\n\r\n    function displayChars(charList) {\r\n        const elements = charList.map((item, i) => {\r\n            const { id, name, thumbnail } = item;\r\n            // Добавляем красную тень выбранному персонажу\r\n            const styleSelectedImg =\r\n                i === selectedChar ? \"char__item char__item_selected\" : \"char__item\";\r\n            // Корректируем формат картинки (not found)\r\n            let styleImgFormat = { objectFit: \"cover\" };\r\n            if (\r\n                thumbnail ===\r\n                    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n                thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n            ) {\r\n                styleImgFormat = { objectFit: \"fill\" };\r\n            }\r\n\r\n            return (\r\n                <CSSTransition key={id} classNames=\"char__item\" timeout={500}>\r\n                    <li\r\n                        className={styleSelectedImg}\r\n                        tabIndex={0}\r\n                        onClick={() => onCharSelected(id, i)}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === \" \" || e.key === \"Enter\") {\r\n                                onCharSelected(id, i);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <img src={thumbnail} alt={name} style={styleImgFormat} />\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            );\r\n        });\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>{elements}</TransitionGroup>\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {setContent(process, () => displayChars(charList), newItemsLoading)}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemsLoading}\r\n                // убираем кнопку если персонажи закончились (style)\r\n                style={{ display: charEnded ? \"none\" : \"block\" }}\r\n                onClick={() => onReguest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func,\r\n};\r\n\r\nexport default CharList;\r\n","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    // достаем сущности из сервиса\r\n    const { process, setProcess, clearError, getCharacterById } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacterById(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess(\"confirmed\"));\r\n    };\r\n\r\n    return <div className=\"char__info\">{setContent(process, View, char)}</div>;\r\n};\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comiclink, comics } = data;\r\n\r\n    const checkedDescr = description || \"The character description is missing\";\r\n    const comicsList = () => {\r\n        if (comics.length === 0) {\r\n            return <li>There are no comics with this character</li>;\r\n        } else {\r\n            let comicsList = comics.map((item, i) => {\r\n                return (\r\n                    <li className=\"char__comics-item\" key={i}>\r\n                        <a href={comiclink} target=\"_blank\" rel=\"noreferrer\">\r\n                            {item.name}\r\n                        </a>\r\n                    </li>\r\n                );\r\n            });\r\n            return comicsList.slice(0, 10);\r\n        }\r\n    };\r\n\r\n    let style = { objectFit: \"cover\" };\r\n\r\n    if (\r\n        thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n        thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n    ) {\r\n        style = { objectFit: \"fill\" };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={style} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a\r\n                            href={homepage}\r\n                            className=\"button button__main\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                        >\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a\r\n                            href={wiki}\r\n                            style={{ display: !wiki ? \"none\" : \"null\" }}\r\n                            className=\"button button__secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                        >\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">{checkedDescr}</div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">{comicsList()}</ul>\r\n        </>\r\n    );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\"; // Для валидации формы\r\nimport { Link } from \"react-router-dom\"; // Для ссылки на отдельную страницу\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./findCharForm.scss\";\r\n\r\nconst FindCharForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { process, setProcess, getCharacterByName, clearError } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess(\"confirmed\"));\r\n    };\r\n\r\n    const errorMessage =\r\n        process === \"error\" ? (\r\n            <div className=\"char__search-wrapper\">\r\n                <ErrorMessage />\r\n            </div>\r\n        ) : null;\r\n\r\n    const results = !char ? null : char.length > 0 ? (\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link\r\n                to={`/characters/${char[0].id}`}\r\n                className=\"button button__secondary\"\r\n                disabled={process === \"loading\"}\r\n                onClick={onCharLoaded}\r\n            >\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div>\r\n    ) : (\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: \"\",\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required(\"This field is required\"),\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">\r\n                        Or find a character by name:\r\n                    </label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"button button__main\"\r\n                            disabled={process === \"loading\"}\r\n                        >\r\n                            <div className=\"inner\">Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage\r\n                        component=\"div\"\r\n                        className=\"char__search-error\"\r\n                        name=\"charName\"\r\n                    />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FindCharForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n// Предохранитель\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport FindCharForm from \"../findCharForm/FindCharForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Marvel information portal\" />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <FindCharForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import error from \"./error.gif\";\r\nimport \"./errorMessage.scss\";\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <div className=\"randomchar__error\">\r\n            <img src={error} alt=\"error\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { process, setProcess, request, clearError } = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=7bb779595667b5381fd0ca5c8939611b\";\r\n    const _baseOffset = 0;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacterById = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        const checkLinks = (arrLinks, linkName) => {\r\n            const item = arrLinks.filter((item) => item.type === linkName);\r\n            return !item[0] ? null : item[0].url;\r\n        };\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: checkLinks(char.urls, \"detail\"),\r\n            wiki: checkLinks(char.urls, \"wiki\"),\r\n            comiclink: checkLinks(char.urls, \"comiclink\"),\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: !comics.description\r\n                ? \"The character description is missing\"\r\n                : comics.description,\r\n            pages: comics.pageCount,\r\n            language: comics.textObjects.language || \"en-us\",\r\n            price: !comics.prices.price ? \"Not available\" : comics.prices.price,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            url: comics.urls[0].url,\r\n        };\r\n    };\r\n\r\n    return {\r\n        process,\r\n        setProcess,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacterById,\r\n        getCharacterByName,\r\n        getAllComics,\r\n        getComic,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    // Принцип конечного автомата FSM (Finite-state machine)\r\n    const [process, setProcess] = useState(\"waiting\");\r\n\r\n    const request = useCallback(\r\n        // мемоизир ф-ю\r\n        async (\r\n            url,\r\n            method = \"GET\",\r\n            body = null,\r\n            headers = { \"Content-type\": \"application/json\" }\r\n        ) => {\r\n            // перед отправкой запроса активируем спинер\r\n            setProcess(\"loading\");\r\n            // отправляем fetch на сервер\r\n            try {\r\n                const res = await fetch(url, { method, body, headers });\r\n                // проверить результат ответа\r\n                if (!res.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n                }\r\n\r\n                const data = await res.json();\r\n                // setProcess(\"confirmed\") - т.к. ф-я async то изменять сост стоит после получения опред данных; ручная установка внутри компонента.\r\n                return data;\r\n            } catch (e) {\r\n                // е - приходит автоматич. из браузера // метод (message) - содерж инфо об ошибке\r\n                throw e;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    // чтобы перезатереть ошибку (кликом на 'try it')\r\n    const clearError = useCallback(() => {\r\n        setProcess(\"loading\");\r\n    }, []);\r\n\r\n    return { process, setProcess, request, clearError };\r\n};\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case \"waiting\":\r\n            return <Skeleton />;\r\n        case \"loading\":\r\n            return <Spinner />;\r\n        case \"confirmed\":\r\n            return <Component data={data} />;\r\n        case \"error\":\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n};\r\n\r\nexport default setContent;\r\n"],"sourceRoot":""}